<!DOCTYPE html>
<html>
<body>
*{
	margin: 0;
	padding: 0;
	font-family: 'JeffScript', cursive;

}

body {
	margin: 0 auto;
	width: 960px;
}

a {
	text-decoration: none;
	color: #040e2b;
}

.header{
	padding-bottom: 20px;
	width: 100%;
	position: relative;
}
nav{
	display: flex;
	padding: 2% 6%;
	justify-content: space-between;
	align-items: center;
}

nav img{
	widows: 150px;

}

.nav-links{
	flex: 1;
	text-align: centre;
}

.nav-links ul li{
	list-style: none;
	display: inline-block;
	padding: 8px 12px;
	position: relative;
}

.nav-links ul li a{
	color: #040e2b;
	text-decoration: none;
	font-size: 16px;
}

.nav-links ul li::after{
	content: '';
	width: 0%;
	height: 2px;
	background: #e63946;
	display: block;	
	margin: auto;
	transition: 0.5s;
}

.nav-links ul li:hover::after{
	width: 100%;

}

nav .fa{
	display: none;
}

@media(max-width: 700px) {
	.nav-links	ul li{
		display: block;
		color: #ffffff;
	}
		.nav-links{
		position: absolute;
		background: #e63946;
		height: 100vh;
		width: 200px;
		top: 0;
		right: -200px;
		text-align: left;
		z-index: 2;
		transition: 1s;
	}

	nav .fa{
		display: block;
		color: #ffffff;
		margin: 10px;
		font-size: 22px;
		cursor: pointer;
	}

	.nav-links ul{
		padding: 30px;
	}		
}

/* CONTENT */

.intro {
	padding-bottom: 20px;
	font-size: 14px;
	font-weight: 400;
	text-align: center;
}

/**
 * For modern browsers
 * 1. The space content is one way to avoid an Opera bug when the
 *    contenteditable attribute is included anywhere else in the document.
 *    Otherwise it causes space to appear at the top and bottom of elements
 *    that are clearfixed.
 * 2. The use of `table` rather than `block` is only necessary if using
 *    `:before` to contain the top-margins of child elements.
 */
.cf:before,
.cf:after {
    content: " "; /* 1 */
    display: table; /* 2 */
}

.cf:after {
    clear: both;
}

/**
 * For IE 6/7 only
 * Include this rule to trigger hasLayout and contain floats.
 */
.cf {
    *zoom: 1;
}

.box {
	position: relative;
	float: left;
	/* 15px is for top AND bottom then 0 is for left AND right */
	margin: 15px 0;
}

.box img {
	position: relative;
	/* z-index defines the order things being stacked, 1=bottom then 2=on top of image with a z-index: 1; */
	z-index: 1;
	margin-left: 15px
}

.box p {
	position: absolute;
	/* Absolute vs relative - absolute looks for the closest relative container, it means we can reference the text from the outside of the image */
	width: 100%;
	top: 12px;
	z-index: 2;
	text-align: center;
	font-size: 24px;
	margin-left: 15px;

}
</body>
</html>
